extends layouts/login-layout.pug

block content
    
    style.
        .bottom-corners {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .bottom-corners img {
            width: 80px;
            height: 80px;
        }
        .dead-row {
            background-color: white; 
            color: black ;
        }
        .loginContainer {
            max-width: 50%; /* Ajustar el ancho máximo del contenedor */
            margin: 0 auto; /* Centrar el contenedor */
            overflow-x: auto; /* Agregar desplazamiento horizontal si es necesario */
            position: relative;

        }

        table {
            width: 100%; /* Asegurar que la tabla ocupe todo el ancho del contenedor */
            table-layout: fixed; /* Forzar que las columnas tengan un ancho fijo */
            word-wrap: break-word; /* Permitir que las palabras largas se ajusten */
        }

        th, td {
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid grey;
            overflow-wrap: break-word; /* Permitir que las palabras largas se dividan */
            word-wrap: break-word; /* Compatibilidad adicional para dividir palabras largas */
            white-space: normal; /* Permitir que el texto se ajuste en varias líneas */
        }

        .corner-image {
            position: absolute;
            width: 80px; 
            height: 80px;
            z-index: 1; 
        }
        .top-left {
            top: 0;
            left: 0;
        }
        .top-right {
            top: 0;
            right: 0;
        }
        .bottom-left {
            bottom: 0;
            left: 0;
        }
        .bottom-right {
            bottom: 0;
            right: 0;
        }
        

    .loginContainer

        img.corner-image.top-left(src="/esq1.png", alt="Imagen esquina 1")
        img.corner-image.top-right(src="/esq2.png", alt="Imagen esquina 2")
        
        //img.corner-image.bottom-left(src="esq3.png", alt="Imagen esquina 3")
        //img.corner-image.bottom-right(src="esq4.png", alt="Imagen esquina 4")
        
        h1 REGISTRAR PERSONA FALLECIDA
        form#registerform(method="post", enctype="multipart/form-data", onsubmit="event.preventDefault();validateform();") 

            p.errorMessage #{errorMessage}  

            input(type="text", name="Nombre", placeholder="Nombre Completo", value=Nombre required="")

            // Botón para mostrar el campo de texto de causa de muerte
            button(type="button", id="specifyDeathButton") Especificar muerte

            // Campo de texto oculto para la causa de la muerte
            textarea(id="CausaMuerte", name="CausaMuerte", placeholder="Causa de Muerte (opcional)", maxlength="500", style="display: none;") #{CausaMuerte}
            br
            input(type="file", name="Foto", accept="image/*")
            br
            input(type="submit", id="submitButton", value="Asesinar")
        a(href="/login") Cerrar Libreta.

        // Mensaje de confirmación
        p#successMessage(style="display: none; color: rgba(176, 25, 25, 0.8);") ¡Asesinato Hecho!

        hr 

        h2 HISTORICO DE LA DEATH NOTE

        table(style="border-collapse: collapse; width: 100%;")
            thead
                tr
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Nombre
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Causa de Muerte
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Foto
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Fecha de Registro
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Estado
                    th(style="padding: 10px; text-align: center; border-bottom: 1px solid grey;") Fecha y Hora de Muerte
            tbody
                each persona, index in personasMuertas
                    tr(id=`persona-${index}` class=persona.Estado === "Muerto" ? "dead-row" : "")
                        td(style="padding: 10px; border-bottom: 1px solid grey;")= persona.Nombre
                        td(style="padding: 10px; border-bottom: 1px solid grey;")= persona.CausaMuerte
                        td(style="padding: 10px; border-bottom: 1px solid grey;")
                            if persona.Foto
                                img(src=`data:image/jpeg;base64,${persona.Foto.toString('base64')}`, alt="Foto", width="50")
                            else
                                | Sin Foto
                        td(style="padding: 10px; border-bottom: 1px solid grey;")= persona.FechaRegistro.toLocaleString('es-ES', { timeZone: 'UTC' })
                        td(style="padding: 10px; border-bottom: 1px solid grey; text-align: center;")= persona.Estado
                        td(style="padding: 10px; border-bottom: 1px solid grey; text-align: center;")
                            if persona.FechaMuerte
                                = new Date(persona.FechaMuerte).toLocaleString('es-ES', { timeZone: 'UTC' })
                            else
                                | -

        .bottom-corners
            img(src="/esq3.png", alt="Imagen esquina 3", class="bottom-left-img")
            img(src="/esq4.png", alt="Imagen esquina 4", class="bottom-right-img") 

    script.
        let timer; // Temporizador
        let timerExpired = false; // Variable para saber si el temporizador expiró
        const timeLimit = 40; // 30 segundos (de momento, para los 6:40 es (60*6) +40)
        const specifyDeathButton = document.getElementById("specifyDeathButton");
        const causaMuerteField = document.getElementById("CausaMuerte");
        const submitButton = document.getElementById("submitButton");
        const successMessage = document.getElementById("successMessage");
        const registerForm = document.getElementById("registerform");

        // Mostrar el campo de texto y comenzar el temporizador al hacer clic en "Especificar muerte"
        specifyDeathButton.addEventListener("click", () => {
            causaMuerteField.style.display = "block"; // Mostrar el campo de texto
            specifyDeathButton.style.display = "none"; // Ocultar el botón

            // Iniciar el temporizador
            clearTimeout(timer); // Reinicia el temporizador si ya estaba corriendo
            timerExpired = false; // Reinicia el estado del temporizador
            timer = setTimeout(() => {
                timerExpired = true; // Marca que el temporizador expiró
                causaMuerteField.value = "Ataque al corazón"; // Establece el valor predeterminado
            }, timeLimit * 1000); // Convierte el tiempo a milisegundos
        });

        // Validar el formulario al presionar "Asesinar"
        async function validateform() {
            clearTimeout(timer); // Detener el temporizador
            if (timerExpired) {
                // Si el temporizador expiró, forzar el valor predeterminado
                causaMuerteField.value = "Ataque al corazón";
            }

            // Enviar los datos del formulario mediante una solicitud AJAX
            const formData = new FormData(registerForm);
            try {
                const response = await fetch(registerForm.action, {
                    method: "POST",
                    body: formData,
                });

                if (response.ok) {
                    successMessage.style.display = "block"; // Mostrar mensaje de éxito
                    registerForm.reset(); // Limpiar el formulario
                    specifyDeathButton.style.display = "block"; // Volver a mostrar el botón "Especificar muerte"
                    causaMuerteField.style.display = "none"; // Ocultar el campo de texto

                    // Crear un modal para la cuenta regresiva
                    const modal = document.createElement("div");
                    modal.id = "countdownModal";
                    modal.style.position = "fixed";
                    modal.style.top = "0";
                    modal.style.left = "0";
                    modal.style.width = "100%";
                    modal.style.height = "100%";
                    modal.style.backgroundColor = "rgba(176, 25, 25, 0.8)";
                    modal.style.color = "white";
                    modal.style.display = "flex";
                    modal.style.justifyContent = "center";
                    modal.style.alignItems = "center";
                    modal.style.zIndex = "1000";
                    modal.innerHTML = `
                        <div style="text-align: center;">
                            <h1>Una muerte esta en proceso en <span id="countdownTimer">40</span> segundos.</h1>
                        </div>
                    `;
                    document.body.appendChild(modal);

                    // Actualizar la cuenta regresiva en tiempo real
                    let countdown = 40;
                    const countdownInterval = setInterval(() => {
                        countdown--;
                        document.getElementById("countdownTimer").textContent = countdown;

                        if (countdown <= 0) {
                            clearInterval(countdownInterval);
                            document.body.removeChild(modal); // Eliminar el modal
                            location.reload(); // Recargar la página al finalizar la cuenta regresiva
                        }
                    }, 1000);
                } else {
                    alert("Hubo un error al registrar la muerte.Inténtalo de nuevo.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Hubo un error al registrar la muerte. Inténtalo de nuevo.");
            }
        }

        function updateStatusAfterTimeout(persona) {
            const fechaRegistro = new Date(persona.FechaRegistro); // Hora de registro
            const fechaMuerte = new Date(fechaRegistro.getTime() + timeLimit * 1000); // Sumar 40 segundos

            setTimeout(() => {
                const row = document.getElementById(`persona-${persona.index}`);
                const estadoCell = row.querySelector("td:nth-child(5)");
                const fechaMuerteCell = row.querySelector("td:nth-child(6)");

                // Verificar si todos los datos están completos
                if (persona.Nombre && persona.CausaMuerte && persona.Foto) {
                    estadoCell.textContent = "Muerto";
                    fechaMuerteCell.textContent = fechaMuerte.toLocaleString('es-ES', { timeZone: 'UTC' });
                } else {
                    estadoCell.textContent = "Vivo";
                    fechaMuerteCell.textContent = "-";
                }
            }, timeLimit * 1000); // 40 segundos
        }

    script.
    
        const successMessage = "#{successMessage}";
        if (successMessage) {
            alert(successMessage);
        }

    

